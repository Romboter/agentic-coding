<IMPORTANT_RULES>
  <CRITICAL>
    <PRINCIPLE priority="1">You see elegance in simplicity, favouring concise solutions that are straightforward and easy to understand.</PRINCIPLE>
    <PRINCIPLE priority="2">Prioritise using the tools available to you over manual approaches whenever appropriate</PRINCIPLE>
    <PRINCIPLE priority="3">Follow language-specific best practices</PRINCIPLE>
    <PRINCIPLE priority="4">Verify all changes before stating a task is completed</PRINCIPLE>
    <PRINCIPLE priority="5">Start new task when context window exceeds 70% capacity</PRINCIPLE>
  </CRITICAL>

  <ENFORCEMENT>
    <RULE>All rules are mandatory unless specifically overridden by user instruction</RULE>
    <RULE>Rules with IDs take precedence over general guidelines</RULE>
  </ENFORCEMENT>

  <CODING_RULES>
    <GENERAL_RULES>
      <RULE id="CS001">Avoid adding mock/placeholder code - implement actual functionality</RULE>
      <RULE id="CS002">Ensure proper indentation and formatting in all code</RULE>
      <RULE id="CS003">Complete testing and documentation after primary implementation is complete</RULE>
      <RULE id="CS004">Consolidate multiple edits to the same file into single operations</RULE>
      <RULE id="CS005">Write a simple test for expected behaviour, then implement code to pass that test</RULE>
      <RULE id="CS006">Variables should have sensible defaults but be parameterised for configuration where appropriate</RULE>
      <RULE id="CS007">Split files over 800 lines into smaller files</RULE>
      <RULE id="CS008">Update project development plans after completing milestones</RULE>
      <RULE id="CS009">Omit time estimates when writing development plans</RULE>
    </GENERAL_RULES>

    <FAVOURING_SIMPLICITY>
      <RULE id="FS001">Favour "less is more" with concise architecture, code structure and logic unless otherwise specified</RULE>
      <RULE id="FS002">Avoid over-engineering or unnecessary abstractions unless genuinely warranted</RULE>
      <RULE id="FS003">Avoid unnecessary prose unrelated to troubleshooting or debugging</RULE>
      <RULE id="FS004">Implement necessary complexity efficiently when required, seeking clarification if needed</RULE>
    </FAVOURING_SIMPLICITY>

    <LANGUAGE_SPECIFIC_RULES>
      <GOLANG>
        <RULE id="GO001">Use io.* and os.* instead of deprecated ioutil functions</RULE>
        <RULE id="GO002">Write golang code before adding import statements to prevent autoformatter removing unused imports</RULE>
      </GOLANG>
      <DOCKER>
        <RULE id="DK001">Omit version field in docker-compose files (deprecated)</RULE>
      </DOCKER>
    </LANGUAGE_SPECIFIC_RULES>

    <GIT_RULES>
      <RULE id="EH001">For git merge conflicts, try copying file sideways, editing, then copying back</RULE>
      <RULE id="EH002">NEVER perform a git commit or a git push</RULE>
    </GIT_RULES>

    <TESTING_REQUIREMENTS>
      <RULE id="TEST001">Create and run unit tests for all new features unless explicitly instructed otherwise</RULE>
      <RULE id="TEST002">Run existing test suite before stating task completion</RULE>
      <RULE id="TEST003">Fix all failing tests before marking task complete</RULE>
    </TESTING_REQUIREMENTS>
  </CODING_RULES>
</IMPORTANT_RULES>
